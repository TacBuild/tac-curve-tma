image: docker:dind

default:
  tags:
    - eks
    - linux
    - cicd

services:
  - name: docker:24.0.2-dind
    command: ["--tls=false"]

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  ROLE_ARN: arn:aws:iam::863518434589:role/aws-oidc-gitlab
  ECR_REGISTRY: 863518434589.dkr.ecr.us-east-1.amazonaws.com
  AWS_DEFAULT_REGION: us-east-1
  ECR_REPOSITORY: curve
  NAMESPACE: curve
  APP: curve

stages:
  - build
  - push
  - deploy

# ---------------------
# 1) BUILD JOB
# ---------------------

build_job:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never
  script:
    - echo "Building a docker image..."
    - docker build -t $ECR_REPOSITORY:latest .
    - docker tag $ECR_REPOSITORY:latest $ECR_REPOSITORY:"${CI_COMMIT_SHA}"

# ---------------------
# 2) PUSH JOB
# ---------------------

push_to_ecr:
  stage: push
  id_tokens:
    OIDC_TOKEN:
      aud: https://gitlab.com
  rules:
    - if: $CI_COMMIT_BRANCH == "v3" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never
  variables:
    AWS_PROFILE: oidc
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli --break-system-packages
    - mkdir -p ~/.aws
    - echo "${OIDC_TOKEN}" > /tmp/web_identity_token
    - echo -e "[profile oidc]\nrole_arn=${ROLE_ARN}\nweb_identity_token_file=/tmp/web_identity_token" > ~/.aws/config
    - >
      aws ecr get-login-password --region "$AWS_DEFAULT_REGION" \
        | docker login --username AWS --password-stdin "$ECR_REGISTRY"
  script:
    - echo "Building a docker image..."
    - docker build -t $ECR_REPOSITORY:latest .
    - docker tag $ECR_REPOSITORY:latest $ECR_REPOSITORY:"${CI_COMMIT_SHA}"
    - echo "Preparing an image to push to AWS ECR..."
    - docker tag $ECR_REPOSITORY:latest "$ECR_REGISTRY/$ECR_REPOSITORY:latest"
    - docker tag $ECR_REPOSITORY:"$CI_COMMIT_SHA" "$ECR_REGISTRY/$ECR_REPOSITORY:${CI_COMMIT_SHA}"
    - echo "Pushing the image to ECR..."
    - docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"
    - docker push "$ECR_REGISTRY/$ECR_REPOSITORY:${CI_COMMIT_SHA}"

# ---------------------
# 3) DEPLOY JOB
# ---------------------

deploy_to_k8s:
  stage: deploy
  id_tokens:
    OIDC_TOKEN:
      aud: https://gitlab.com
  needs:
    - job: push_to_ecr
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH == "v3" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never
  image: alpine:3.21
  variables:
    AWS_PROFILE: oidc
    EKS_CLUSTER: tac-testnet-use1-eks
    ENVIRONMENT: testnet
  before_script:
    - apk add --update --no-cache bash curl python3 py3-pip openssl
    - pip3 install awscli --break-system-packages
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    - mkdir -p ~/.aws
    - echo "${OIDC_TOKEN}" > /tmp/web_identity_token
    - echo -e "[profile oidc]\nrole_arn=${ROLE_ARN}\nweb_identity_token_file=/tmp/web_identity_token" > ~/.aws/config
    - aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_DEFAULT_REGION
  script:
    - echo "Deploying to Kubernetes..."
    - cd .ci/chart
    - >
      helm upgrade --install --wait --debug \
        -n $NAMESPACE \
        -f $ENVIRONMENT.yaml \
        -f $ENVIRONMENT-$APP.yaml \
        --set-string nameOverride=$APP \
        --set-string image.tag="${CI_COMMIT_SHA}" \
        $APP .
    - echo "Deploy finished"

